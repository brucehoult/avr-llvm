Index: lib/CodeGen/RegAllocGreedy.cpp
===================================================================
--- lib/CodeGen/RegAllocGreedy.cpp	(revision 152006)
+++ lib/CodeGen/RegAllocGreedy.cpp	(working copy)
@@ -85,6 +85,9 @@
   std::priority_queue<std::pair<unsigned, unsigned> > Queue;
   unsigned NextCascade;
 
+  // AVR specific: have we already unallocated REG_Y after a spill was done?
+  bool IsYReserved;
+
   // Live ranges pass through a number of stages as we try to allocate them.
   // Some of the stages may also create new live ranges:
   //
@@ -290,6 +293,8 @@
     SmallVectorImpl<LiveInterval*>&);
   unsigned trySplit(LiveInterval&, AllocationOrder&,
                     SmallVectorImpl<LiveInterval*>&);
+
+  void UndoRegYAllocation();
 };
 } // end anonymous namespace
 
@@ -315,7 +320,7 @@
   return new RAGreedy();
 }
 
-RAGreedy::RAGreedy(): MachineFunctionPass(ID) {
+RAGreedy::RAGreedy(): MachineFunctionPass(ID), IsYReserved(false) {
   initializeLiveDebugVariablesPass(*PassRegistry::getPassRegistry());
   initializeSlotIndexesPass(*PassRegistry::getPassRegistry());
   initializeLiveIntervalsPass(*PassRegistry::getPassRegistry());
@@ -1592,7 +1597,33 @@
   return tryBlockSplit(VirtReg, Order, NewVRegs);
 }
 
+// AVR specific code used to handle the reservation of REG_Y if any other
+// register has been spilled.
+// :NOTE: KEEP THIS CONSTANT UPDATED with the backend!
+//   This has to be a define because of linkage problems between libraries.
+#define REG_Y   (45U)
+bool RA_ReserveREG_Y = false;
+bool RA_InSpillerCode = false;
 
+void RAGreedy::UndoRegYAllocation() {
+  // search for all live intervals where REG_Y has been allocated and send them
+  // back to the work list for reallocation
+  for (LiveIntervals::const_iterator I = LIS->begin(), E = LIS->end(); I != E;
+       ++I) {
+    unsigned VirtReg = I->first;
+    if (!TargetRegisterInfo::isVirtualRegister(VirtReg))
+      continue;
+
+    for (const uint16_t *AliasI = TRI->getOverlaps(REG_Y); *AliasI; ++AliasI)
+      if (VRM->getPhys(VirtReg) == *AliasI) {
+        LiveInterval &LI = *I->second;
+        unassign(LI, *AliasI);
+        enqueue(&LI);
+      }
+  }
+}
+#undef REG_Y
+
 //===----------------------------------------------------------------------===//
 //                            Main Entry Point
 //===----------------------------------------------------------------------===//
@@ -1643,11 +1674,25 @@
     return PhysReg;
 
   // Finally spill VirtReg itself.
+  RA_InSpillerCode = true;
   NamedRegionTimer T("Spiller", TimerGroupName, TimePassesIsEnabled);
   LiveRangeEdit LRE(VirtReg, NewVRegs, this);
   spiller().spill(LRE);
   setStage(NewVRegs.begin(), NewVRegs.end(), RS_Done);
+  RA_InSpillerCode = false;
 
+  // AVR specific: If we have reached this point and the backend has notified
+  // it has inserted a spill via ReserveREG_Y, then search for any allocations
+  // of REG_Y in the live intervals and undo them.
+  if (!IsYReserved && RA_ReserveREG_Y) {
+    // do all this work only once
+    IsYReserved = true;
+    // update the reserved register list
+    RegClassInfo.runOnMachineFunction(VRM->getMachineFunction());
+    // finally perform the real work
+    UndoRegYAllocation();
+  }
+
   if (VerifyEnabled)
     MF->verify(this, "After spilling");
 
@@ -1686,6 +1731,9 @@
   addMBBLiveIns(MF);
   LIS->addKillFlags();
 
+  IsYReserved = false;
+  RA_ReserveREG_Y = false;
+
   // Run rewriter
   {
     NamedRegionTimer T("Rewriter", TimerGroupName, TimePassesIsEnabled);
