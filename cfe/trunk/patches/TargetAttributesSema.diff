Index: lib/Sema/TargetAttributesSema.cpp
===================================================================
--- lib/Sema/TargetAttributesSema.cpp   (revisi√≥n: 151992)
+++ lib/Sema/TargetAttributesSema.cpp   (copia de trabajo)
@@ -120,6 +120,39 @@
   };
 }

+static void HandleAVRInterruptHandlerAttr(Decl *d, const AttributeList &Attr,
+                                          Sema &S) {
+  // Check the attribute arguments.
+  if (Attr.getNumArgs() != 0) {
+    S.Diag(Attr.getLoc(), diag::err_attribute_wrong_number_arguments) << 0;
+    return;
+  }
+
+  // FIXME: Check for decl - it should be void ()(void).
+
+  d->addAttr(::new (S.Context) AVRInterruptHandlerAttr(Attr.getLoc(),
+                                                       S.Context));
+  d->addAttr(::new (S.Context) UsedAttr(Attr.getLoc(), S.Context));
+}
+
+namespace {
+  class AVRAttributesSema : public TargetAttributesSema {
+  public:
+    AVRAttributesSema() { }
+    bool ProcessDeclAttribute(Scope *scope, Decl *D, const AttributeList &Attr,
+                              Sema &S) const {
+      if (Attr.getName()->getName() == "signal") {
+        HandleAVRInterruptHandlerAttr(D, Attr, S);
+        return true;
+      } /*else if (Attr.getName()->getName() == "interrupt") {
+        //:TODO:
+        return true;
+      }*/
+      return false;
+    }
+  };
+}
+
 static void HandleX86ForceAlignArgPointerAttr(Decl *D,
                                               const AttributeList& Attr,
                                               Sema &S) {
@@ -272,6 +305,8 @@
   case llvm::Triple::x86:
   case llvm::Triple::x86_64:
     return *(TheTargetAttributesSema = new X86AttributesSema);
+  case llvm::Triple::avr:
+    return *(TheTargetAttributesSema = new AVRAttributesSema);
   default:
     return *(TheTargetAttributesSema = new TargetAttributesSema);
   } 
