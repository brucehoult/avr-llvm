//===-- AVRISelDAGToDAG.cpp - A dag to dag inst selector for AVR ---------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source 
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the AVR target.
//
//===----------------------------------------------------------------------===//

#define DEBUG_TYPE "avr-isel"

#include "AVR.h"
//#include "AVRISelLowering.h"
#include "AVRRegisterInfo.h"
#include "AVRTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Intrinsics.h"
using namespace llvm;

namespace {

class VISIBILITY_HIDDEN AVRDAGToDAGISel : public SelectionDAGISel {

  /// TM - Keep a reference to AVRTargetMachine.
  //AVRTargetMachine &TM;

  /// AVRLowering - This object fully describes how to lower LLVM code to an
  /// AVR-specific SelectionDAG.
  //AVRTargetLowering AVRLowering;

  /// Subtarget - Keep a pointer to the Sparc Subtarget around so that we can
  /// make the right decision when generating code for different targets. 
  const AVRSubtarget &Subtarget;

public:
  explicit AVRDAGToDAGISel(AVRTargetMachine &tm) : 
        SelectionDAGISel(tm),
        Subtarget(tm.getSubtarget<AVRSubtarget>()){} //, AVRLowering(*TM.getTargetLowering()) {}
  
  // Pass Name
  virtual const char *getPassName() const {
    return "AVR DAG->DAG Pattern Instruction Selection";
  } 

  virtual void InstructionSelect();
  
private:
  // Include the pieces autogenerated from the target description.
#include "AVRGenDAGISel.inc"

  SDNode *Select(SDValue N);

  // Match IO address complex pattern.
  bool SelectIOAddr(SDValue Op, SDValue N, SDValue &Address);

};

}

